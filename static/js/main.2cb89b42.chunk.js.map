{"version":3,"sources":["components/Weather.module.css","components/NewsPreview.module.css","components/Header.module.css","components/TodoItem.module.css","components/Article.module.css","components/Forecast.module.css","components/Paginator.module.css","components/Footer.module.css","containers/TodoApp.module.css","components/TodoList.module.css","components/Header.jsx","components/TodoInput.js","api/api.js","actionCreators/actionCreator.js","constants.js","components/TodoItem.js","components/TodoList.jsx","components/Footer.jsx","containers/TodoApp.jsx","components/NewsPreview.jsx","components/Paginator.jsx","components/News.jsx","containers/NewsContainer.jsx","components/Forecast.jsx","components/Weather.jsx","components/Towns.js","containers/WeatherContainer.jsx","components/Article.jsx","containers/ArticleContainer.jsx","App.js","serviceWorker.js","reducers/tasksReducer.js","reducers/filtersReducer.js","reducers/newsReducer.js","reducers/weatherReducer.js","reducers/reduxStore.js","index.js"],"names":["module","exports","withRouter","props","match","location","history","pathname","className","styles","header","navlinkContainer","to","TodoInput","value","onChange","addTask","placeholder","onKeyPress","instanceNews","axios","baseURL","headers","instanceWeather","newsAPI","topic","sortBy","pageSize","currentPage","get","weatherAPI","cityId","setTopicAC","type","setSortByAC","getIdAndLocaleDateToArticles","data","length","articles","i","id","publishedAt","Date","toLocaleString","TodoItem","state","editMode","taskText","text","timer","activateEditMode","setState","deactivateEditMode","updateTaskTextAC","onTaskTextChange","e","currentTarget","updateTaskText","key","mouseDownHandler","setTimeout","mouseUpHandler","clearTimeout","prevProps","prevState","this","isCompleted","completeTask","removeTask","todoItem","icon","faCheckCircle","faCircle","size","onClick","iconDone","todoItemDone","todoItemDefault","onMouseDown","onMouseUp","updateTaskTextDone","updateTaskTextDefault","onBlur","autoFocus","faTimesCircle","iconDel","React","PureComponent","TodoList","tasks","list","map","BTN_FILTERS","Footer","amount","changeFilter","currentFilter","buttonsBottom","btn","TodoApp","handleChange","target","addTaskAC","getTime","getActiveTasksCounter","filter","task","getFilteredTasks","tasksAmount","filteredTasks","filters","todoContainer","completeTaskAC","removeTaskAC","activeFilter","changeFilterAC","connect","tasksReducer","filtersReducer","NewsPreview","author","title","description","url","image","date","content","setCurrentArticle","postSection","cardWrapper","darkerImg","src","alt","img","cardTitle","postInfo","Paginator","totalNewsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","push","portionsCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","paginatorBtn","p","pageNumber","News","a","urlToImage","NewsContainer","newTopic","newSortBy","requestNewsTC","now","lastNewsRequestTime","Component","compose","newsReducer","requestedPage","dispatch","console","log","response","totalResults","Forecast","time","precipitation","weatherIcon","temperature","imgUrl","forecastElementsContainer","forecastElements","forecastHour","getHours","forecastIcon","forecastChanceOfRain","forecastTemperature","Weather","currentWeather","isChoosing","towns","toggleChoosing","closeChoosing","finishingToChoose","getAngle","twoDayForecast","humidity","pressure","partOfDay","lastObservationTime","clouds","city","windSpeed","windDirection","visibility","sunset","sunrise","weather","snowfall","feelsLike","menuItems","t","listItem","listItemBtn","name","forecast","f","ts","timestamp_local","pop","temp","container","topContainer","style","transform","cityArrow","animateWrapper","CSSTransition","in","timeout","classNames","unmountOnExit","listIcon","imgWrapper","scrollParent","station","WeatherContainer","setChosenCity","rotate","lastWeatherRequestTime","requestWeatherTC","chosenCity","snapshot","weatherReducer","currentWeatherResponse","rh","pod","pres","ob_time","city_name","wind_spd","wind_cdir","vis","snow","app_temp","twoDayForecastResponse","Article","article","headline","authorAndDate","articleImageWrapper","articleImage","href","ArticleContainer","currentArticle","unsetCurrentArticle","App","path","render","Boolean","window","hostname","initialState","action","newTask","code","reducers","combineReducers","store","applyMiddleware","save","namespace","thunkMiddleware","createStore","createStoreWithMiddleware","load","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2cb89b42.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Weather_container__3jiyo\",\"topContainer\":\"Weather_topContainer__2own-\",\"animateWrapper\":\"Weather_animateWrapper__xgnE_\",\"list\":\"Weather_list__3SXR7\",\"listIcon\":\"Weather_listIcon__1HApB\",\"listItem\":\"Weather_listItem__196hW\",\"listItemBtn\":\"Weather_listItemBtn__1RycA\",\"cityArrow\":\"Weather_cityArrow__3S7VW\",\"imgWrapper\":\"Weather_imgWrapper__X4Ui0\",\"scrollParent\":\"Weather_scrollParent__2Pacz\",\"station\":\"Weather_station__2bZRB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postSection\":\"NewsPreview_postSection__2VkAa\",\"cardWrapper\":\"NewsPreview_cardWrapper__2HnB6\",\"cardTitle\":\"NewsPreview_cardTitle__2yp5C\",\"postInfo\":\"NewsPreview_postInfo__2SZT-\",\"author\":\"NewsPreview_author__C30C8\",\"date\":\"NewsPreview_date__3tuGh\",\"title\":\"NewsPreview_title__3pL1x\",\"description\":\"NewsPreview_description__39sMJ\",\"darkerImg\":\"NewsPreview_darkerImg__XQ_Ch\",\"img\":\"NewsPreview_img__1-Omg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3aMD0\",\"navlinkContainer\":\"Header_navlinkContainer__2pGzW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoItem\":\"TodoItem_todoItem__2IiaL\",\"todoItemDefault\":\"TodoItem_todoItemDefault__3RMUt\",\"todoItemDone\":\"TodoItem_todoItemDone__17SVq\",\"iconDone\":\"TodoItem_iconDone__2zmEV\",\"iconDel\":\"TodoItem_iconDel__2cMEa\",\"updateTaskTextDefault\":\"TodoItem_updateTaskTextDefault__1Rd9G\",\"updateTaskTextDone\":\"TodoItem_updateTaskTextDone__eAMnH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"article\":\"Article_article__5YdEk\",\"headline\":\"Article_headline__1zIic\",\"authorAndDate\":\"Article_authorAndDate__J-nVS\",\"title\":\"Article_title__1Mm6_\",\"articleImageWrapper\":\"Article_articleImageWrapper__kSzPF\",\"articleImage\":\"Article_articleImage__2g-qM\",\"content\":\"Article_content__27sGh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forecastElementsContainer\":\"Forecast_forecastElementsContainer__32Ork\",\"forecastElements\":\"Forecast_forecastElements__3-RB-\",\"forecastHour\":\"Forecast_forecastHour__BitDN\",\"forecastIcon\":\"Forecast_forecastIcon__13wes\",\"forecastChanceOfRain\":\"Forecast_forecastChanceOfRain__2cGqA\",\"forecastTemperature\":\"Forecast_forecastTemperature__2MuCf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1Jk5L\",\"pageNumber\":\"Paginator_pageNumber__KTADM\",\"pages\":\"Paginator_pages__3c8B5\",\"paginatorBtn\":\"Paginator_paginatorBtn__1k8zu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsBottom\":\"Footer_buttonsBottom__B4owN\",\"amount\":\"Footer_amount__br43c\",\"btn\":\"Footer_btn__FmJp2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoContainer\":\"TodoApp_todoContainer__1ig-a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"TodoList_list__3uD_o\"};","import React from \"react\";\r\nimport styles from \"./Header.module.css\";\r\nimport {NavLink, withRouter} from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    const {match, location, history} = props;\r\n    switch (location.pathname) {\r\n        case \"/news\": {\r\n            return (\r\n                <div className={styles.header}>\r\n                    <div className={styles.navlinkContainer}>\r\n                        <NavLink to={\"/\"}>To Do List</NavLink>\r\n                        <NavLink to={\"/weather\"}>Weather Channel</NavLink>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        case \"/weather\": {\r\n            return (\r\n                <div className={styles.header}>\r\n                    <div className={styles.navlinkContainer}>\r\n                        <NavLink to={\"/\"}>To Do List</NavLink>\r\n                        <NavLink to={\"/news\"}>News Channel</NavLink>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        case \"/news/:articleId\": {\r\n            return (\r\n                <div className={styles.header}>\r\n                    <div className={styles.navlinkContainer}>\r\n                        <NavLink to={\"/\"}>To Do List</NavLink>\r\n                        <NavLink to={\"/news\"}>News Channel</NavLink>\r\n                        <NavLink to={\"/weather\"}>Weather Channel</NavLink>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        default: {\r\n            return (\r\n                <div className={styles.header}>\r\n                    <div className={styles.navlinkContainer}>\r\n                        <NavLink to={\"/news\"}>News Feed</NavLink>\r\n                        <NavLink to={\"/weather\"}>Weather Channel</NavLink>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nexport default withRouter(Header);","import React from \"react\";\r\n\r\nconst TodoInput = ({value, onChange, addTask}) => {\r\n    return (\r\n      <div>\r\n        <i/>\r\n        <input placeholder=\"Add a task\" value={value} onChange={onChange} onKeyPress={addTask}/>\r\n      </div>\r\n    );\r\n};\r\n  \r\n  export default TodoInput;","import * as axios from \"axios\";\r\n\r\nconst instanceNews = axios.create({\r\n    baseURL: \"https://newsapi.org/v2/\",\r\n    headers: {\r\n        \"X-Api-Key\": \"40b5268a68a74369a4eabc0b9745407e\"\r\n    }\r\n});\r\n\r\nconst instanceWeather = axios.create({\r\n    baseURL: \"https://api.weatherbit.io/v2.0/\"\r\n});\r\n\r\nexport const newsAPI = {\r\n    getNews(topic = \"apple\", sortBy = \"publishedAt\", pageSize = 20, currentPage = 1) {\r\n        return instanceNews.get(`everything?language=en&q=${topic}&sortBy=${sortBy}&pageSize=${pageSize}&page=${currentPage}`);\r\n    },\r\n    getTopNews(pageSize = 20, currentPage = 1) {\r\n        return instanceNews.get(`top-headlines?pageSize=${pageSize}&page=${currentPage}`);\r\n    }\r\n};\r\n\r\nexport const weatherAPI = {\r\n    getTwoDayForecast(cityId = \"706483\") {\r\n        return instanceWeather.get(`forecast/hourly?key=90db46941f2d41eba9eef01407d850c5&lang=en&units=M&city_id=${cityId}&hours=24`);\r\n    },\r\n    getCurrentWeather(cityId = \"706483\") {\r\n        return instanceWeather.get(`current?key=90db46941f2d41eba9eef01407d850c5&lang=en&units=M&city_id=${cityId}`);\r\n    }\r\n};","import {\r\n    ADD_TASK,\r\n    REMOVE_TASK,\r\n    COMPLETE_TASK,\r\n    CHANGE_FILTER,\r\n    UPDATE_TASK_TEXT,\r\n    SET_TOTAL_NEWS_COUNT,\r\n    SET_CURRENT_PAGE,\r\n    SET_ARTICLES,\r\n    SET_TOPIC,\r\n    SET_SORT_BY,\r\n    SET_CURRENT_ARTICLE,\r\n    UNSET_CURRENT_ARTICLE,\r\n    SET_TWO_DAY_FORECAST,\r\n    SET_CURRENT_WEATHER,\r\n    SET_CHOSEN_CITY,\r\n    SET_ARRAY_OF_CITIES,\r\n    SET_LAST_WEATHER_REQUEST_TIME,\r\n    SET_LAST_NEWS_REQUEST_TIME\r\n} from \"../constants\";\r\nimport {newsAPI, weatherAPI} from \"../api/api\";\r\n\r\nexport const addTaskAC = (id, text, isCompleted) => ({\r\n    type: ADD_TASK,\r\n    id,\r\n    text,\r\n    isCompleted\r\n});\r\n\r\nexport const removeTaskAC = id => ({\r\n    type: REMOVE_TASK,\r\n    id\r\n});\r\n\r\nexport const completeTaskAC = id => ({\r\n    type: COMPLETE_TASK,\r\n    id\r\n});\r\n\r\nexport const changeFilterAC = currentFilter => ({\r\n    type: CHANGE_FILTER,\r\n    currentFilter\r\n});\r\n\r\nexport const updateTaskTextAC = (id, text) => ({\r\n    type: UPDATE_TASK_TEXT,\r\n    id,\r\n    text\r\n});\r\n\r\nexport const setTotalNewsCountAC = (totalNewsCount) => ({\r\n    type: SET_TOTAL_NEWS_COUNT,\r\n    totalNewsCount\r\n});\r\n\r\nexport const setCurrentPageAC = (currentPage) => ({\r\n    type: SET_CURRENT_PAGE,\r\n    currentPage\r\n});\r\n\r\nexport const setArticlesAC = (articles) => ({\r\n    type: SET_ARTICLES,\r\n    articles\r\n});\r\n\r\nexport const setTopicAC = (topic) => ({\r\n    type: SET_TOPIC,\r\n    topic\r\n});\r\n\r\nexport const setSortByAC = (sortBy) => ({\r\n    type: SET_SORT_BY,\r\n    sortBy\r\n});\r\n\r\nexport const setCurrentArticle = (id, author, title, description, url, image, date, content) => ({\r\n    type: SET_CURRENT_ARTICLE,\r\n    id,\r\n    author,\r\n    title,\r\n    description,\r\n    url,\r\n    image,\r\n    date,\r\n    content\r\n});\r\n\r\nexport const unsetCurrentArticle = () => ({\r\n    type: UNSET_CURRENT_ARTICLE\r\n});\r\n\r\nexport const setTwoDayForecast = (twoDayForecast) => ({\r\n    type: SET_TWO_DAY_FORECAST,\r\n    twoDayForecast\r\n});\r\n\r\nexport const setCurrentWeather = ({rh, pod, pres, ob_time, clouds, city_name, wind_spd, wind_cdir,\r\n                                      vis, sunset, snow, sunrise, weather, temp, app_temp}) => ({\r\n    type: SET_CURRENT_WEATHER,\r\n    rh,\r\n    pod,\r\n    pres,\r\n    ob_time,\r\n    clouds,\r\n    city_name,\r\n    wind_spd,\r\n    wind_cdir,\r\n    vis,\r\n    sunset,\r\n    snow,\r\n    sunrise,\r\n    weather,\r\n    temp,\r\n    app_temp\r\n});\r\n\r\nexport const setChosenCity = (chosenCity) => ({\r\n    type: SET_CHOSEN_CITY,\r\n    chosenCity\r\n});\r\n\r\nexport const setArrayOfCities = (towns) => ({\r\n    type: SET_ARRAY_OF_CITIES,\r\n    towns\r\n});\r\n\r\nexport const setLastWeatherRequestTime = (lastWeatherRequestTime) => ({\r\n    type: SET_LAST_WEATHER_REQUEST_TIME,\r\n    lastWeatherRequestTime\r\n});\r\n\r\nexport const setLastNewsRequestTime = (lastNewsRequestTime) => ({\r\n    type: SET_LAST_NEWS_REQUEST_TIME,\r\n    lastNewsRequestTime\r\n});\r\n\r\nconst getIdAndLocaleDateToArticles = (data) => {\r\n    let length = data.articles.length;\r\n    for(let i = 0; i < length; i++) {\r\n        data.articles[i].id = i;\r\n        data.articles[i].publishedAt = new Date(data.articles[i].publishedAt).toLocaleString();\r\n    }\r\n    return data;\r\n};\r\n\r\nexport const requestNewsTC = (topic, sortBy, pageSize, requestedPage) => async (dispatch) => {\r\n    console.log(\"requested news\");\r\n    try {\r\n        await dispatch(setCurrentPageAC(requestedPage));\r\n        await dispatch(setTopicAC(topic));\r\n        await dispatch(setSortByAC(sortBy));\r\n        let response = await newsAPI.getNews(topic, sortBy, pageSize, requestedPage);\r\n        await dispatch(setLastNewsRequestTime(Date.now()));\r\n        let data = await getIdAndLocaleDateToArticles(response.data);\r\n        await dispatch(setArticlesAC(data.articles));\r\n        await dispatch(setTotalNewsCountAC(data.totalResults));\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n};\r\n\r\nexport const requestWeatherTC = (cityId) => async (dispatch) => {\r\n    console.log(\"requested new weather\");\r\n    try {\r\n        const currentWeatherResponse = await weatherAPI.getCurrentWeather(cityId);\r\n        await dispatch(setLastWeatherRequestTime(Date.now()));\r\n        // const response = await fetch(\"https://api.weatherbit.io/v2.0/current?key=90db46941f2d41eba9eef01407d850c5&lang=en&units=M&city_id=706483\");\r\n        // const data = await response.json();\r\n        // await dispatch(setCurrentWeather(data.data[0]));\r\n        await dispatch(setCurrentWeather(currentWeatherResponse.data.data[0]));\r\n        const twoDayForecastResponse = await weatherAPI.getTwoDayForecast(cityId);\r\n        await dispatch(setTwoDayForecast(twoDayForecastResponse.data.data));\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n\r\n};\r\n\r\n// export const requestTwoDayForecastTC = (cityId) => async (dispatch) => {\r\n//     const twoDayForecastResponse = await weatherAPI.getTwoDayForecast(cityId);\r\n//     await dispatch(setTwoDayForecast(twoDayForecastResponse.data.data));\r\n// };","export const ADD_TASK = \"ADD_TASK\";\r\nexport const REMOVE_TASK = \"REMOVE_TASK\";\r\nexport const COMPLETE_TASK = \"COMPLETE_TASK\";\r\nexport const CHANGE_FILTER = \"CHANGE_FILTER\";\r\nexport const UPDATE_TASK_TEXT = \"UPDATE_TASK_TEXT\";\r\nexport const SET_ARTICLES = \"SET_ARTICLES\";\r\nexport const SET_TOTAL_NEWS_COUNT = \"SET_TOTAL_NEWS_COUNT\";\r\nexport const SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nexport const SET_TOPIC = \"SET_TOPIC\";\r\nexport const SET_SORT_BY = \"SET_SORT_BY\";\r\nexport const SET_CURRENT_ARTICLE = \"SET_CURRENT_ARTICLE\";\r\nexport const UNSET_CURRENT_ARTICLE = \"UNSET_CURRENT_ARTICLE\";\r\nexport const SET_TWO_DAY_FORECAST = \"SET_TWO_DAY_FORECAST\";\r\nexport const SET_CURRENT_WEATHER = \"SET_CURRENT_WEATHER\";\r\nexport const SET_CHOSEN_CITY = \"SET_CHOSEN_CITY\";\r\nexport const SET_ARRAY_OF_CITIES = \"SET_ARRAY_OF_CITIES\";\r\nexport const SET_LAST_WEATHER_REQUEST_TIME = \"weatherReducer/SET_LAST_WEATHER_REQUEST_TIME\";\r\nexport const SET_LAST_NEWS_REQUEST_TIME = \"newsReducer/SET_LAST_NEWS_REQUEST_TIME\";","import React from \"react\";\nimport styles from \"./TodoItem.module.css\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCircle, faCheckCircle, faTimesCircle} from \"@fortawesome/free-regular-svg-icons\";\n\nclass TodoItem extends React.PureComponent {\n    state = {\n        editMode: false,\n        taskText: this.props.text,\n        id: null\n    };\n\n    timer = 0;\n\n    activateEditMode = (id) => {\n        this.setState({\n            editMode: true,\n            id\n        });\n    };\n\n    deactivateEditMode = () => {\n        this.props.updateTaskTextAC(this.state.id, this.state.taskText);\n        this.setState({\n            editMode: false\n        });\n    };\n\n    onTaskTextChange = (e) => {\n        this.setState({\n            taskText: e.currentTarget.value\n        })\n    };\n\n    updateTaskText = ({key}) => {\n        if(key === \"Enter\") {\n            this.props.updateTaskTextAC(this.state.id, this.state.taskText);\n            this.setState({\n                editMode: false\n            });\n        }\n    };\n\n    mouseDownHandler = (id) => {\n        this.timer = setTimeout(this.activateEditMode, 800, id);\n    };\n\n    mouseUpHandler = () => {\n        clearTimeout(this.timer);\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        if(prevProps.text !== this.props.text) {\n            this.setState({\n                taskText: this.props.text\n            });\n        }\n    }\n\n    render() {\n        const {id, isCompleted, completeTask, removeTask} = this.props;\n        const {editMode, taskText} = this.state;\n        return (\n            <li>\n                <div className={styles.todoItem}>\n                    <FontAwesomeIcon icon={isCompleted ? faCheckCircle : faCircle} size=\"lg\" onClick={() => completeTask(id)} className={styles.iconDone}/>\n                    {!editMode && \n                        <span className={isCompleted ? styles.todoItemDone : styles.todoItemDefault} onMouseDown={() => this.mouseDownHandler(id)} onMouseUp={this.mouseUpHandler}>\n                            {taskText}\n                        </span>\n                    }\n                    {editMode &&\n                        <input className={isCompleted ? styles.updateTaskTextDone : styles.updateTaskTextDefault} onKeyPress={this.updateTaskText} onChange={this.onTaskTextChange} onBlur={this.deactivateEditMode} autoFocus={true} value={taskText}/>\n                    }\n                    <FontAwesomeIcon icon={faTimesCircle} size=\"lg\" onClick={() => removeTask(id)} className={styles.iconDel}/>\n                </div>\n            </li>\n        );\n    }\n}\n\nexport default TodoItem;\n\n","import React from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport styles from \"./TodoList.module.css\";\r\n\r\nconst TodoList = ({tasks, completeTask, removeTask, updateTaskTextAC}) => (\r\n    <ul className={styles.list}>\r\n        <div>\r\n        {tasks.map(({id, text, isCompleted}) => (\r\n            <TodoItem key={id}\r\n                      id={id}\r\n                      text={text}\r\n                      isCompleted={isCompleted}\r\n                      completeTask={completeTask}\r\n                      removeTask={removeTask}\r\n                      updateTaskTextAC={updateTaskTextAC}/>\r\n        ))}\r\n        </div>\r\n    </ul>\r\n);\r\n\r\nexport default TodoList;","import React from \"react\";\r\nimport styles from \"./Footer.module.css\";\r\n\r\nconst BTN_FILTERS = [\r\n    {\r\n        text: \"All\",\r\n        id: \"all\",\r\n    },\r\n    {\r\n        text: \"Active\",\r\n        id: \"active\",\r\n    },\r\n    {\r\n        text: \"Completed\",\r\n        id: \"completed\"\r\n    }\r\n];\r\n\r\nconst Footer = ({amount, currentFilter, changeFilter}) => (\r\n    <div className={styles.buttonsBottom}>\r\n        <span className={styles.amount}>{`${amount} Left`}</span>\r\n            {\r\n                BTN_FILTERS.map(({id, text}) => (\r\n                    <button className={styles.btn} key={id} onClick={() => changeFilter(id)}>{text}</button>\r\n                ))\r\n            }\r\n    </div>\r\n);\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport styles from './TodoApp.module.css';\r\nimport TodoInput from \"../components/TodoInput\";\r\nimport {addTaskAC, removeTaskAC, completeTaskAC, changeFilterAC, updateTaskTextAC} from \"../actionCreators/actionCreator\";\r\nimport TodoList from \"../components/TodoList\";\r\nimport Footer from \"../components/Footer\";\r\n\r\n\r\nclass TodoApp extends React.PureComponent {\r\n  state = {\r\n    taskText: \"\"\r\n  };\r\n  \r\n  handleChange = ({target: {value}}) => {\r\n    this.setState({\r\n      taskText: value\r\n    });\r\n  };\r\n\r\n  addTask = ({key}) => {\r\n    const {taskText} = this.state;\r\n    if(taskText.length > 3 && key === \"Enter\") {\r\n      const {addTaskAC} = this.props;\r\n      addTaskAC((new Date()).getTime(), taskText, false);\r\n      this.setState({\r\n        taskText: \"\"\r\n      });\r\n    }\r\n  };\r\n\r\n  getActiveTasksCounter = tasks => tasks.filter(task => !task.isCompleted).length;\r\n\r\n  getFilteredTasks = (tasks, currentFilter) => {\r\n    switch (currentFilter) {\r\n        case \"active\": {\r\n            return this.props.tasks.filter(task => ((!task.isCompleted) && task));\r\n        }\r\n        case \"completed\": {\r\n            return this.props.tasks.filter(task => ((task.isCompleted) && task));\r\n        }\r\n        default:\r\n            return tasks;\r\n    }\r\n  };\r\n\r\n  render() {\r\n      const tasksAmount = this.getActiveTasksCounter(this.props.tasks);\r\n      const filteredTasks = this.getFilteredTasks(this.props.tasks, this.props.filters);\r\n    return (\r\n      <div className={styles.todoContainer}>\r\n        <TodoInput onChange={this.handleChange} addTask={this.addTask} value={this.state.taskText}/>\r\n        <TodoList tasks={filteredTasks} completeTask={this.props.completeTaskAC} removeTask={this.props.removeTaskAC} updateTaskTextAC={this.props.updateTaskTextAC}/>\r\n        <Footer amount={tasksAmount} activeFilter={this.props.filters} changeFilter={this.props.changeFilterAC}/>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default connect(state => ({\r\n  tasks: state.tasksReducer.tasks,\r\n  filters: state.filtersReducer\r\n}), {addTaskAC, removeTaskAC, completeTaskAC, changeFilterAC, updateTaskTextAC})(TodoApp);","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styles from \"./NewsPreview.module.css\";\r\n\r\nclass NewsPreview extends React.PureComponent {\r\n    render() {\r\n        const {id, author, title, description, url, image, date, content, setCurrentArticle} = this.props;\r\n        return (\r\n            <div className={styles.postSection}>\r\n                <NavLink to={\"/news/\" + id}\r\n                         onClick={() => setCurrentArticle(id, author, title, description, url, image, date, content)}>\r\n                    <div className={styles.cardWrapper}>\r\n                        <div className={styles.darkerImg}>\r\n                            <img src={image} alt={\"articleImage\"} className={styles.img}/>\r\n                        </div>\r\n                        <div className={styles.cardTitle}>\r\n                            <div className={styles.postInfo}>\r\n                                <span className={styles.author}>{author}</span>\r\n                                <span className={styles.date}>{date}</span>\r\n                            </div>\r\n                            <p className={styles.title}>{title}</p>\r\n                        </div>\r\n                    </div>\r\n                </NavLink>\r\n                <div>\r\n                    <p className={styles.description}>{description}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewsPreview;\r\n","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\n\r\nconst Paginator = ({totalNewsCount, currentPage, pageSize, topic, sortBy, onPageChanged, portionSize = 15}) => {\r\n\r\n    let pagesCount = Math.ceil(totalNewsCount / pageSize);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionsCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div className={styles.paginator}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => setPortionNumber(portionNumber - 1)}\r\n                    className={styles.paginatorBtn}>PREV</button>}\r\n\r\n            {pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber).map((p) => {\r\n                return (\r\n                    <span key={p}\r\n                          onClick={() => onPageChanged(topic, sortBy, p)}\r\n                          className={(currentPage === p) ? styles.pageNumber : styles.pages}>\r\n                        {p}\r\n                    </span>\r\n                );\r\n            })}\r\n\r\n            {portionsCount > portionNumber &&\r\n            <button onClick={() => setPortionNumber(portionNumber + 1)}\r\n                    className={styles.paginatorBtn}>NEXT</button>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Paginator;","import React from \"react\";\r\nimport NewsPreview from \"./NewsPreview\";\r\nimport Paginator from \"./Paginator\";\r\n\r\nconst News = ({articles, totalNewsCount, currentPage, pageSize, topic, sortBy, onPageChanged, setCurrentArticle}) => {\r\n    return <div>\r\n        <Paginator totalNewsCount={totalNewsCount}\r\n                   currentPage={currentPage}\r\n                   pageSize={pageSize}\r\n                   topic={topic}\r\n                   sortBy={sortBy}\r\n                   onPageChanged={onPageChanged}/>\r\n        <div>\r\n            {articles.map(a => <NewsPreview key={a.id}\r\n                                            id={a.id}\r\n                                            author={a.author}\r\n                                            title={a.title}\r\n                                            description={a.description}\r\n                                            url={a.url}\r\n                                            image={a.urlToImage}\r\n                                            date={a.publishedAt}\r\n                                            content={a.content}\r\n                                            setCurrentArticle={setCurrentArticle}/>)}\r\n        </div>\r\n    </div>\r\n};\r\n\r\nexport default News;","import React from \"react\";\r\nimport News from \"../components/News\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {requestNewsTC, setCurrentArticle} from \"../actionCreators/actionCreator\";\r\n\r\nclass NewsContainer extends React.Component{\r\n    componentDidMount() {\r\n        (Date.now() - this.props.lastNewsRequestTime > 900000) &&\r\n        this.props.requestNewsTC(this.props.topic, this.props.sortBy, this.props.pageSize, this.props.currentPage);\r\n    }\r\n\r\n    onPageChanged = (newTopic = this.props.topic, newSortBy = this.props.sortBy, pageNumber = this.props.currentPage) => {\r\n        this.props.requestNewsTC(newTopic, newSortBy, this.props.pageSize, pageNumber);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <News articles={this.props.articles}\r\n                  totalNewsCount={this.props.totalNewsCount}\r\n                  currentPage={this.props.currentPage}\r\n                  pageSize={this.props.pageSize}\r\n                  topic={this.props.topic}\r\n                  sortBy={this.props.sortBy}\r\n                  onPageChanged={this.onPageChanged}\r\n                  setCurrentArticle={this.props.setCurrentArticle}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        articles: state.newsReducer.articles,\r\n        totalNewsCount: state.newsReducer.totalNewsCount,\r\n        currentPage: state.newsReducer.currentPage,\r\n        pageSize: state.newsReducer.pageSize,\r\n        topic: state.newsReducer.topic,\r\n        sortBy: state.newsReducer.sortBy,\r\n        lastNewsRequestTime: state.newsReducer.lastNewsRequestTime\r\n    }\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {requestNewsTC, setCurrentArticle})\r\n)(NewsContainer);","import React from \"react\";\r\nimport styles from \"./Forecast.module.css\";\r\n\r\nconst Forecast= ({time, precipitation, weatherIcon, temperature}) => {\r\n\r\n    const imgUrl = `https://weatherbit.io/static/img/icons/${weatherIcon}.png`;\r\n\r\n    return (\r\n        <div className={styles.forecastElementsContainer}>\r\n            <div className={styles.forecastElements}>\r\n                <div className={styles.forecastHour}>{new Date(time).getHours()}</div>\r\n                <div className={styles.forecastIcon}>\r\n                    <div className={styles.forecastChanceOfRain}>{(precipitation > 9) && `${precipitation}%`}</div>\r\n                    <img src={imgUrl} alt=\"forecastIcon\"/>\r\n                </div>\r\n                <div className={styles.forecastTemperature}>{temperature}&#176;</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Forecast;","import React from \"react\";\r\nimport styles from \"./Weather.module.css\";\r\nimport \"./transitionGroup.css\";\r\nimport {CSSTransition} from \"react-transition-group\";\r\nimport Forecast from \"./Forecast\";\r\n\r\nconst Weather = ({currentWeather, isChoosing, towns, toggleChoosing, closeChoosing,\r\n                     finishingToChoose, getAngle, twoDayForecast}) => {\r\n\r\n    const {\r\n        humidity,\r\n        partOfDay,\r\n        pressure,\r\n        lastObservationTime,\r\n        clouds,\r\n        city,\r\n        windSpeed,\r\n        windDirection,\r\n        visibility,\r\n        sunset,\r\n        sunrise,\r\n        snowfall,\r\n        weather,\r\n        temperature,\r\n        feelsLike\r\n    } = currentWeather;\r\n\r\n    const imgUrl = `https://weatherbit.io/static/img/icons/${weather.icon}.png`;\r\n\r\n    const menuItems = towns.map(t => {\r\n        return (\r\n            <li key={t.id} id={t.id}\r\n                onClick={() => {finishingToChoose(t.id)}}\r\n                className={styles.listItem}>\r\n                <button className={styles.listItemBtn}>{t.name}</button>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    const forecast = twoDayForecast.map(f => {\r\n        return (\r\n            <Forecast key={f.ts}\r\n                      time={f.timestamp_local}\r\n                      precipitation={f.pop}\r\n                      weatherIcon={f.weather.icon}\r\n                      temperature={f.temp}/>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.topContainer}>\r\n                <h1 onClick={() => toggleChoosing()}>{city}\r\n                    <i style={{transform: `rotate(${getAngle(isChoosing)}deg)`}}\r\n                       className={styles.cityArrow}>&#10148;</i>\r\n                </h1>\r\n                <div className={styles.animateWrapper}>\r\n                    <CSSTransition in={isChoosing} timeout={350}\r\n                                   classNames={\"dropDown\"} unmountOnExit>\r\n                        <ul className={styles.list}>\r\n                            <i className={styles.listIcon}\r\n                               onClick={() => closeChoosing()}>&#10005;</i>\r\n                            {menuItems}\r\n                        </ul>\r\n                    </CSSTransition>\r\n                </div>\r\n                <div>\r\n                    <span>Current t&#176; {temperature}&#176;C</span>\r\n                </div>\r\n                <div>\r\n                    <span>Feels Like {feelsLike}&#176;C</span>\r\n                </div>\r\n                <div className={styles.imgWrapper}>\r\n                    <span>{weather.description}</span>\r\n                    <img src={imgUrl} alt=\"weatherIcon\"/>\r\n                </div>\r\n                <div className={styles.scrollParent}>\r\n                    {forecast}\r\n                </div>\r\n                <div>\r\n                    <span>Wind: {windSpeed} m/s {windDirection}</span>\r\n                </div>\r\n                <div>\r\n                    <span>Visibility: {visibility} km</span>\r\n                </div>\r\n                <div>\r\n                    <span>Cloudiness: {clouds}%</span>\r\n                </div>\r\n                <div>\r\n                    <span>Humidity: {humidity}%</span>\r\n                </div>\r\n                <div>\r\n                    <span>Pressure: {pressure} hPa</span>\r\n                </div>\r\n                <div>\r\n                    <span>Sunrise: {sunrise}</span>\r\n                </div>\r\n                <div>\r\n                    <span>Sunset: {sunset}</span>\r\n                </div>\r\n                <div className={styles.station}>\r\n                    <span>There was the last respond from the station at: {lastObservationTime}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Weather;","export const towns = [{name: \"Kharkiv\", id: \"706483\"},\r\n    {name: \"Kiev\", id: \"703448\"},\r\n    {name: \"Moscow\", id: \"524901\"},\r\n    {name: \"Berlin\", id: \"2950159\"},\r\n    {name: \"London\", id: \"2643743\"}];","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Weather from \"../components/Weather\";\r\nimport {setChosenCity, requestWeatherTC} from \"../actionCreators/actionCreator\";\r\nimport {towns} from \"../components/Towns\";\r\n\r\nclass WeatherContainer extends React.Component {\r\n    state = {\r\n        isChoosing : false\r\n    };\r\n\r\n    toggleChoosing = () => {\r\n        this.setState({\r\n            isChoosing: !this.state.isChoosing\r\n        });\r\n    };\r\n\r\n    closeChoosing = () => {\r\n        this.setState({\r\n            isChoosing: false\r\n        });\r\n    };\r\n\r\n    finishingToChoose = (cityId) => {\r\n        this.props.setChosenCity(cityId);\r\n        this.closeChoosing();\r\n    };\r\n\r\n    getAngle = (isChoosing) => {\r\n        let rotate = 90;\r\n        return isChoosing ? rotate = 270 : rotate;\r\n    };\r\n\r\n    // handleScroll = (e) => {\r\n    //     let element = e.target;\r\n    //     if (element.scrollWidth - element.scrollLeft === element.clientWidth) {\r\n    //         element.scrollLeft += 50;\r\n    //         //console.log(element.scrollWidth);\r\n    //     }\r\n    // };\r\n\r\n    componentDidMount() {\r\n        if (Date.now() - this.props.lastWeatherRequestTime > 3600000) {\r\n            this.props.requestWeatherTC(this.props.chosenCity);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.chosenCity !== this.props.chosenCity) {\r\n            this.props.requestWeatherTC(this.props.chosenCity);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props);\r\n        return (\r\n            <Weather currentWeather={this.props.currentWeather}\r\n                     isChoosing={this.state.isChoosing}\r\n                     towns={towns}\r\n                     toggleChoosing={this.toggleChoosing}\r\n                     closeChoosing={this.closeChoosing}\r\n                     finishingToChoose={this.finishingToChoose}\r\n                     getAngle={this.getAngle}\r\n                     twoDayForecast={this.props.twoDayForecast}/>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        currentWeather: state.weatherReducer.currentWeather,\r\n        chosenCity: state.weatherReducer.chosenCity,\r\n        lastWeatherRequestTime: state.weatherReducer.lastWeatherRequestTime,\r\n        twoDayForecast: state.weatherReducer.twoDayForecast\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {setChosenCity, requestWeatherTC})(WeatherContainer);","import React from \"react\";\r\nimport styles from \"./Article.module.css\";\r\n\r\nconst Article = ({id, author, title, description, url, image, date, content}) => {\r\n    return (\r\n        <div className={styles.article}>\r\n            <div className={styles.headline}>\r\n                <div className={styles.authorAndDate}>\r\n                    <span>{author}</span>\r\n                    <span>{date}</span>\r\n                </div>\r\n                <div className={styles.title}>\r\n                    <h1>{title}</h1>\r\n                </div>\r\n            </div>\r\n            <div className={styles.articleImageWrapper}>\r\n                <img src={image} alt=\"articleImage\" className={styles.articleImage}/>\r\n                <span><a href={url}>Article source here</a></span>\r\n            </div>\r\n            <div className={styles.content}>{content}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Article;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {unsetCurrentArticle} from \"../actionCreators/actionCreator\";\r\nimport Article from \"../components/Article\";\r\n\r\nclass ArticleContainer extends React.PureComponent {\r\n    render() {\r\n        const {id, author, title, description, url, image, date, content} = this.props.currentArticle;\r\n        return (\r\n            <Article id={id}\r\n                     author={author}\r\n                     title={title}\r\n                     description={description}\r\n                     url={url}\r\n                     image={image}\r\n                     date={date}\r\n                     content={content}/>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        currentArticle: state.newsReducer.currentArticle\r\n    }\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {unsetCurrentArticle}),\r\n    withRouter,\r\n)(ArticleContainer);","import React, {Fragment} from \"react\";\nimport {Route, Switch, withRouter} from \"react-router-dom\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport Header from \"./components/Header\";\nimport TodoApp from \"./containers/TodoApp\";\nimport NewsContainer from \"./containers/NewsContainer\";\nimport WeatherContainer from \"./containers/WeatherContainer\";\nimport ArticleContainer from \"./containers/ArticleContainer\";\n\n\nclass App extends React.PureComponent {\n    render() {\n        return (\n            <Fragment>\n                <Header title=\"To do list\"/>\n                <Switch>\n                    <Route path={\"/news/:articleId\"} render={() => <ArticleContainer/>}/>\n                    <Route path={\"/news\"} render={() => <NewsContainer/>}/>\n                    <Route path={\"/weather\"} render={() => <WeatherContainer/>}/>\n                    <Route path={\"/\"} render={() => <TodoApp/>}/>\n                </Switch>\n            </Fragment>\n        );\n    }\n}\n\nexport default compose(\n    withRouter,\n    connect())(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ADD_TASK, REMOVE_TASK, COMPLETE_TASK, UPDATE_TASK_TEXT} from \"../constants\";\r\n\r\nconst initialState = {\r\n    tasks: [\r\n        {\r\n            id: 322,\r\n            text: \"Это захардкодженая таска, добавляй свои плз\",\r\n            isCompleted: false\r\n        }\r\n    ]\r\n};\r\n\r\nconst tasksReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case ADD_TASK: {\r\n            let newTask = {\r\n                id: action.id,\r\n                text: action.text,\r\n                isCompleted: action.isCompleted\r\n            };\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks, newTask]\r\n            }\r\n        }\r\n        case COMPLETE_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(task => {\r\n                    if(task.id === action.id) {\r\n                        return {...task, isCompleted: !task.isCompleted}\r\n                    }\r\n                    return task;\r\n                })\r\n                // tasks: state.tasks.map(task => ((task.id === action.id) && {...task, isCompleted: true}))\r\n            }\r\n        }\r\n        case REMOVE_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.filter(task => task.id !== action.id)\r\n            }\r\n        }\r\n        case UPDATE_TASK_TEXT: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(task => {\r\n                    if(task.id === action.id) {\r\n                        return {...task, text: action.text}\r\n                    }\r\n                    return task;\r\n                })\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default tasksReducer;","import {CHANGE_FILTER} from \"../constants\";\r\n\r\nconst BASE_BTN = \"all\";\r\n\r\nconst filtersReducer = (state = BASE_BTN, action) => {\r\n    switch (action.type) {\r\n        case CHANGE_FILTER: {\r\n            return action.currentFilter;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default filtersReducer;","import {\r\n    SET_ARTICLES,\r\n    SET_CURRENT_PAGE,\r\n    SET_TOTAL_NEWS_COUNT,\r\n    SET_TOPIC,\r\n    SET_SORT_BY,\r\n    SET_CURRENT_ARTICLE,\r\n    UNSET_CURRENT_ARTICLE,\r\n    SET_LAST_NEWS_REQUEST_TIME\r\n} from \"../constants\";\r\n\r\nlet initialState = {\r\n    articles: [],\r\n    totalNewsCount: 0,\r\n    currentPage: 1,\r\n    pageSize: 20,\r\n    topic: \"apple\",\r\n    sortBy: \"publishedAt\",\r\n    lastNewsRequestTime: 0,\r\n    currentArticle: {}\r\n};\r\n\r\nconst newsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_ARTICLES: {\r\n            return {\r\n                ...state,\r\n                articles: [...action.articles]\r\n            }\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        }\r\n        case SET_TOTAL_NEWS_COUNT: {\r\n            return {\r\n                ...state,\r\n                totalNewsCount: action.totalNewsCount\r\n            }\r\n        }\r\n        case SET_TOPIC: {\r\n            return {\r\n                ...state,\r\n                topic: action.topic\r\n            }\r\n        }\r\n        case SET_SORT_BY: {\r\n            return {\r\n                ...state,\r\n                sortBy: action.sortBy\r\n            }\r\n        }\r\n        case SET_CURRENT_ARTICLE: {\r\n            return {\r\n                ...state,\r\n                currentArticle: {\r\n                    ...state.currentArticle,\r\n                    id: action.id,\r\n                    author: action.author,\r\n                    title: action.title,\r\n                    description: action.description,\r\n                    url: action.url,\r\n                    image: action.image,\r\n                    date: action.date,\r\n                    content: action.content\r\n                }\r\n            }\r\n        }\r\n        case UNSET_CURRENT_ARTICLE: {\r\n            return {\r\n                ...state,\r\n                currentArticle: {}\r\n            }\r\n        }\r\n        case SET_LAST_NEWS_REQUEST_TIME: {\r\n            return {\r\n                ...state,\r\n                lastNewsRequestTime: action.lastNewsRequestTime\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default newsReducer;","import {\r\n    SET_CURRENT_WEATHER,\r\n    SET_TWO_DAY_FORECAST,\r\n    SET_CHOSEN_CITY,\r\n    SET_ARRAY_OF_CITIES,\r\n    SET_LAST_WEATHER_REQUEST_TIME\r\n} from \"../constants\";\r\n\r\nconst initialState = {\r\n    currentWeather: {\r\n        humidity: null,\r\n        partOfDay: null,\r\n        pressure: null,\r\n        lastObservationTime: null,\r\n        clouds: null,\r\n        city: null,\r\n        windSpeed: null,\r\n        windDirection: null,\r\n        visibility: null,\r\n        sunset: null,\r\n        sunrise: null,\r\n        snowfall: null,\r\n        weather: {\r\n            icon: null,\r\n            code: null,\r\n            description: null\r\n        },\r\n        temperature: null,\r\n        feelsLike: null\r\n    },\r\n    chosenCity: \"706483\",\r\n    lastWeatherRequestTime: 0,\r\n    twoDayForecast: []\r\n};\r\n\r\nconst weatherReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_CURRENT_WEATHER: {\r\n            return {\r\n                ...state,\r\n                currentWeather: {\r\n                    ...state.currentWeather,\r\n                    humidity: action.rh,\r\n                    partOfDay: action.pod,\r\n                    pressure: action.pres,\r\n                    lastObservationTime: action.ob_time,\r\n                    clouds: action.clouds,\r\n                    city: action.city_name,\r\n                    windSpeed: action.wind_spd,\r\n                    windDirection: action.wind_cdir,\r\n                    visibility: action.vis,\r\n                    sunset: action.sunset,\r\n                    sunrise: action.sunrise,\r\n                    snowfall: action.snow,\r\n                    weather: action.weather,\r\n                    temperature: action.temp,\r\n                    feelsLike: action.app_temp\r\n                }\r\n            }\r\n        }\r\n        case SET_CHOSEN_CITY: {\r\n            return {\r\n                ...state,\r\n                chosenCity: action.chosenCity\r\n            }\r\n        }\r\n        case SET_ARRAY_OF_CITIES: {\r\n            return {\r\n                ...state,\r\n                towns: action.towns\r\n            }\r\n        }\r\n        case  SET_LAST_WEATHER_REQUEST_TIME: {\r\n            return {\r\n                ...state,\r\n                lastWeatherRequestTime: action.lastWeatherRequestTime\r\n            }\r\n        }\r\n        case SET_TWO_DAY_FORECAST: {\r\n            return {\r\n                ...state,\r\n                twoDayForecast: action.twoDayForecast\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default weatherReducer;","import {combineReducers, createStore, applyMiddleware} from \"redux\";\r\nimport tasksReducer from \"./tasksReducer\";\r\nimport filtersReducer from \"./filtersReducer\";\r\nimport newsReducer from \"./newsReducer\";\r\nimport {save, load} from \"redux-localstorage-simple\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport weatherReducer from \"./weatherReducer\";\r\n\r\nconst reducers = combineReducers({\r\n    tasksReducer,\r\n    filtersReducer,\r\n    newsReducer,\r\n    weatherReducer\r\n});\r\n\r\nconst createStoreWithMiddleware = applyMiddleware(save({namespace: \"todo-app\"}), thunkMiddleware)(createStore);\r\nconst store = createStoreWithMiddleware(reducers, load({namespace: \"todo-app\"}));\r\n\r\n//let store = createStore(reducers, applyMiddleware(save({namespace: \"todo-list\"})));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {HashRouter} from \"react-router-dom\";\nimport store from \"./reducers/reduxStore\";\n\nReactDOM.render((\n    <HashRouter basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}